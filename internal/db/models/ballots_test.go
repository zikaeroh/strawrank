// Code generated by SQLBoiler (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"bytes"
	"context"
	"reflect"
	"testing"

	"github.com/volatiletech/sqlboiler/boil"
	"github.com/volatiletech/sqlboiler/queries"
	"github.com/volatiletech/sqlboiler/randomize"
	"github.com/volatiletech/sqlboiler/strmangle"
)

var (
	// Relationships sometimes use the reflection helper queries.Equal/queries.Assign
	// so force a package dependency in case they don't.
	_ = queries.Equal
)

func testBallots(t *testing.T) {
	t.Parallel()

	query := Ballots()

	if query.Query == nil {
		t.Error("expected a query, got nothing")
	}
}

func testBallotsDelete(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Ballot{}
	if err = randomize.Struct(seed, o, ballotDBTypes, true, ballotColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Ballot struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = o.Delete(ctx, tx); err != nil {
		t.Error(err)
	}

	count, err := Ballots().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testBallotsQueryDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Ballot{}
	if err = randomize.Struct(seed, o, ballotDBTypes, true, ballotColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Ballot struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = Ballots().DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	}

	count, err := Ballots().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testBallotsSliceDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Ballot{}
	if err = randomize.Struct(seed, o, ballotDBTypes, true, ballotColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Ballot struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := BallotSlice{o}

	if err = slice.DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	}

	count, err := Ballots().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testBallotsExists(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Ballot{}
	if err = randomize.Struct(seed, o, ballotDBTypes, true, ballotColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Ballot struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	e, err := BallotExists(ctx, tx, o.ID)
	if err != nil {
		t.Errorf("Unable to check if Ballot exists: %s", err)
	}
	if !e {
		t.Errorf("Expected BallotExists to return true, but got false.")
	}
}

func testBallotsFind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Ballot{}
	if err = randomize.Struct(seed, o, ballotDBTypes, true, ballotColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Ballot struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	ballotFound, err := FindBallot(ctx, tx, o.ID)
	if err != nil {
		t.Error(err)
	}

	if ballotFound == nil {
		t.Error("want a record, got nil")
	}
}

func testBallotsBind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Ballot{}
	if err = randomize.Struct(seed, o, ballotDBTypes, true, ballotColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Ballot struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = Ballots().Bind(ctx, tx, o); err != nil {
		t.Error(err)
	}
}

func testBallotsOne(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Ballot{}
	if err = randomize.Struct(seed, o, ballotDBTypes, true, ballotColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Ballot struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if x, err := Ballots().One(ctx, tx); err != nil {
		t.Error(err)
	} else if x == nil {
		t.Error("expected to get a non nil record")
	}
}

func testBallotsAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	ballotOne := &Ballot{}
	ballotTwo := &Ballot{}
	if err = randomize.Struct(seed, ballotOne, ballotDBTypes, false, ballotColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Ballot struct: %s", err)
	}
	if err = randomize.Struct(seed, ballotTwo, ballotDBTypes, false, ballotColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Ballot struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = ballotOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = ballotTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := Ballots().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 2 {
		t.Error("want 2 records, got:", len(slice))
	}
}

func testBallotsCount(t *testing.T) {
	t.Parallel()

	var err error
	seed := randomize.NewSeed()
	ballotOne := &Ballot{}
	ballotTwo := &Ballot{}
	if err = randomize.Struct(seed, ballotOne, ballotDBTypes, false, ballotColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Ballot struct: %s", err)
	}
	if err = randomize.Struct(seed, ballotTwo, ballotDBTypes, false, ballotColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Ballot struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = ballotOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = ballotTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := Ballots().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 2 {
		t.Error("want 2 records, got:", count)
	}
}

func testBallotsInsert(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Ballot{}
	if err = randomize.Struct(seed, o, ballotDBTypes, true, ballotColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Ballot struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := Ballots().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testBallotsInsertWhitelist(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Ballot{}
	if err = randomize.Struct(seed, o, ballotDBTypes, true); err != nil {
		t.Errorf("Unable to randomize Ballot struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Whitelist(ballotColumnsWithoutDefault...)); err != nil {
		t.Error(err)
	}

	count, err := Ballots().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testBallotToOnePollUsingPoll(t *testing.T) {
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var local Ballot
	var foreign Poll

	seed := randomize.NewSeed()
	if err := randomize.Struct(seed, &local, ballotDBTypes, false, ballotColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Ballot struct: %s", err)
	}
	if err := randomize.Struct(seed, &foreign, pollDBTypes, false, pollColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Poll struct: %s", err)
	}

	if err := foreign.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	local.PollID = foreign.ID
	if err := local.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := local.Poll().One(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	if check.ID != foreign.ID {
		t.Errorf("want: %v, got %v", foreign.ID, check.ID)
	}

	slice := BallotSlice{&local}
	if err = local.L.LoadPoll(ctx, tx, false, (*[]*Ballot)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if local.R.Poll == nil {
		t.Error("struct should have been eager loaded")
	}

	local.R.Poll = nil
	if err = local.L.LoadPoll(ctx, tx, true, &local, nil); err != nil {
		t.Fatal(err)
	}
	if local.R.Poll == nil {
		t.Error("struct should have been eager loaded")
	}
}

func testBallotToOneSetOpPollUsingPoll(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a Ballot
	var b, c Poll

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, ballotDBTypes, false, strmangle.SetComplement(ballotPrimaryKeyColumns, ballotColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &b, pollDBTypes, false, strmangle.SetComplement(pollPrimaryKeyColumns, pollColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, pollDBTypes, false, strmangle.SetComplement(pollPrimaryKeyColumns, pollColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	for i, x := range []*Poll{&b, &c} {
		err = a.SetPoll(ctx, tx, i != 0, x)
		if err != nil {
			t.Fatal(err)
		}

		if a.R.Poll != x {
			t.Error("relationship struct not set to correct value")
		}

		if x.R.Ballots[0] != &a {
			t.Error("failed to append to foreign relationship struct")
		}
		if a.PollID != x.ID {
			t.Error("foreign key was wrong value", a.PollID)
		}

		zero := reflect.Zero(reflect.TypeOf(a.PollID))
		reflect.Indirect(reflect.ValueOf(&a.PollID)).Set(zero)

		if err = a.Reload(ctx, tx); err != nil {
			t.Fatal("failed to reload", err)
		}

		if a.PollID != x.ID {
			t.Error("foreign key was wrong value", a.PollID, x.ID)
		}
	}
}

func testBallotsReload(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Ballot{}
	if err = randomize.Struct(seed, o, ballotDBTypes, true, ballotColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Ballot struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = o.Reload(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testBallotsReloadAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Ballot{}
	if err = randomize.Struct(seed, o, ballotDBTypes, true, ballotColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Ballot struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := BallotSlice{o}

	if err = slice.ReloadAll(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testBallotsSelect(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Ballot{}
	if err = randomize.Struct(seed, o, ballotDBTypes, true, ballotColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Ballot struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := Ballots().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 1 {
		t.Error("want one record, got:", len(slice))
	}
}

var (
	ballotDBTypes = map[string]string{`ID`: `bigint`, `CreatedAt`: `timestamp with time zone`, `UpdatedAt`: `timestamp with time zone`, `PollID`: `bigint`, `Cookie`: `text`, `IPAddr`: `inet`, `Votes`: `ARRAYbigint`}
	_             = bytes.MinRead
)

func testBallotsUpdate(t *testing.T) {
	t.Parallel()

	if 0 == len(ballotPrimaryKeyColumns) {
		t.Skip("Skipping table with no primary key columns")
	}
	if len(ballotAllColumns) == len(ballotPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &Ballot{}
	if err = randomize.Struct(seed, o, ballotDBTypes, true, ballotColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Ballot struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := Ballots().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, ballotDBTypes, true, ballotPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize Ballot struct: %s", err)
	}

	if err = o.Update(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
}

func testBallotsSliceUpdateAll(t *testing.T) {
	t.Parallel()

	if len(ballotAllColumns) == len(ballotPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &Ballot{}
	if err = randomize.Struct(seed, o, ballotDBTypes, true, ballotColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Ballot struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := Ballots().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, ballotDBTypes, true, ballotPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize Ballot struct: %s", err)
	}

	// Remove Primary keys and unique columns from what we plan to update
	var fields []string
	if strmangle.StringSliceMatch(ballotAllColumns, ballotPrimaryKeyColumns) {
		fields = ballotAllColumns
	} else {
		fields = strmangle.SetComplement(
			ballotAllColumns,
			ballotPrimaryKeyColumns,
		)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	typ := reflect.TypeOf(o).Elem()
	n := typ.NumField()

	updateMap := M{}
	for _, col := range fields {
		for i := 0; i < n; i++ {
			f := typ.Field(i)
			if f.Tag.Get("boil") == col {
				updateMap[col] = value.Field(i).Interface()
			}
		}
	}

	slice := BallotSlice{o}
	if err = slice.UpdateAll(ctx, tx, updateMap); err != nil {
		t.Error(err)
	}
}

func testBallotsUpsert(t *testing.T) {
	t.Parallel()

	if len(ballotAllColumns) == len(ballotPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	// Attempt the INSERT side of an UPSERT
	o := Ballot{}
	if err = randomize.Struct(seed, &o, ballotDBTypes, true); err != nil {
		t.Errorf("Unable to randomize Ballot struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Upsert(ctx, tx, false, nil, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert Ballot: %s", err)
	}

	count, err := Ballots().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}

	// Attempt the UPDATE side of an UPSERT
	if err = randomize.Struct(seed, &o, ballotDBTypes, false, ballotPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize Ballot struct: %s", err)
	}

	if err = o.Upsert(ctx, tx, true, nil, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert Ballot: %s", err)
	}

	count, err = Ballots().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}
}
