// Code generated by SQLBoiler 3.5.0 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import "testing"

// This test suite runs each operation test in parallel.
// Example, if your database has 3 tables, the suite will run:
// table1, table2 and table3 Delete in parallel
// table1, table2 and table3 Insert in parallel, and so forth.
// It does NOT run each operation group in parallel.
// Separating the tests thusly grants avoidance of Postgres deadlocks.
func TestParent(t *testing.T) {
	t.Run("Ballots", testBallots)
	t.Run("Polls", testPolls)
}

func TestDelete(t *testing.T) {
	t.Run("Ballots", testBallotsDelete)
	t.Run("Polls", testPollsDelete)
}

func TestQueryDeleteAll(t *testing.T) {
	t.Run("Ballots", testBallotsQueryDeleteAll)
	t.Run("Polls", testPollsQueryDeleteAll)
}

func TestSliceDeleteAll(t *testing.T) {
	t.Run("Ballots", testBallotsSliceDeleteAll)
	t.Run("Polls", testPollsSliceDeleteAll)
}

func TestExists(t *testing.T) {
	t.Run("Ballots", testBallotsExists)
	t.Run("Polls", testPollsExists)
}

func TestFind(t *testing.T) {
	t.Run("Ballots", testBallotsFind)
	t.Run("Polls", testPollsFind)
}

func TestBind(t *testing.T) {
	t.Run("Ballots", testBallotsBind)
	t.Run("Polls", testPollsBind)
}

func TestOne(t *testing.T) {
	t.Run("Ballots", testBallotsOne)
	t.Run("Polls", testPollsOne)
}

func TestAll(t *testing.T) {
	t.Run("Ballots", testBallotsAll)
	t.Run("Polls", testPollsAll)
}

func TestCount(t *testing.T) {
	t.Run("Ballots", testBallotsCount)
	t.Run("Polls", testPollsCount)
}

func TestInsert(t *testing.T) {
	t.Run("Ballots", testBallotsInsert)
	t.Run("Ballots", testBallotsInsertWhitelist)
	t.Run("Polls", testPollsInsert)
	t.Run("Polls", testPollsInsertWhitelist)
}

// TestToOne tests cannot be run in parallel
// or deadlocks can occur.
func TestToOne(t *testing.T) {
	t.Run("BallotToPollUsingPoll", testBallotToOnePollUsingPoll)
}

// TestOneToOne tests cannot be run in parallel
// or deadlocks can occur.
func TestOneToOne(t *testing.T) {}

// TestToMany tests cannot be run in parallel
// or deadlocks can occur.
func TestToMany(t *testing.T) {
	t.Run("PollToBallots", testPollToManyBallots)
}

// TestToOneSet tests cannot be run in parallel
// or deadlocks can occur.
func TestToOneSet(t *testing.T) {
	t.Run("BallotToPollUsingBallots", testBallotToOneSetOpPollUsingPoll)
}

// TestToOneRemove tests cannot be run in parallel
// or deadlocks can occur.
func TestToOneRemove(t *testing.T) {}

// TestOneToOneSet tests cannot be run in parallel
// or deadlocks can occur.
func TestOneToOneSet(t *testing.T) {}

// TestOneToOneRemove tests cannot be run in parallel
// or deadlocks can occur.
func TestOneToOneRemove(t *testing.T) {}

// TestToManyAdd tests cannot be run in parallel
// or deadlocks can occur.
func TestToManyAdd(t *testing.T) {
	t.Run("PollToBallots", testPollToManyAddOpBallots)
}

// TestToManySet tests cannot be run in parallel
// or deadlocks can occur.
func TestToManySet(t *testing.T) {}

// TestToManyRemove tests cannot be run in parallel
// or deadlocks can occur.
func TestToManyRemove(t *testing.T) {}

func TestReload(t *testing.T) {
	t.Run("Ballots", testBallotsReload)
	t.Run("Polls", testPollsReload)
}

func TestReloadAll(t *testing.T) {
	t.Run("Ballots", testBallotsReloadAll)
	t.Run("Polls", testPollsReloadAll)
}

func TestSelect(t *testing.T) {
	t.Run("Ballots", testBallotsSelect)
	t.Run("Polls", testPollsSelect)
}

func TestUpdate(t *testing.T) {
	t.Run("Ballots", testBallotsUpdate)
	t.Run("Polls", testPollsUpdate)
}

func TestSliceUpdateAll(t *testing.T) {
	t.Run("Ballots", testBallotsSliceUpdateAll)
	t.Run("Polls", testPollsSliceUpdateAll)
}
